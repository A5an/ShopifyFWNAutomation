Подпишитесь на DeepL Pro и переводите документы большего объема.
Подробнее на www.DeepL.com/pro.

Технические характеристики:
Автоматизация учета ФВН

1. Предпосылки и цели
2. Объем проекта
3. Ожидаемые функциональные возможности
4. Примеры пользовательских путей
5. Технические ограничения
6. KPIs / показатели успеха
7. Предварительный график / основные этапы
8. Методология и организация работы
9. Бюджет и ресурсы

1. Контекст и цели
История вопроса:

Каждый раз при получении счета-фактуры цена за единицу продукции может быть
разной, что значительно затрудняет расчет маржи и рентабельности.
В настоящее время :

● Закупки вносятся в общий файл Excel (Google Sheets).
● Средняя стоимость продукта пересчитывается вручную, счет за счетом.
● Этот процесс отнимает много времени, чреват ошибками и не
масштабируется по мере увеличения объема закупок.

Конкретный пример:
Мы покупаем 20 единиц по 5 евро, затем еще 20 по 5,50 евро, даже если на складе
осталось 10.
Бухгалтеру приходится вручную пересчитывать средневзвешенную стоимость, чтобы
узнать реальную рентабельность следующего проданного продукта.

Задачи

Цель - разработать модуль автоматизации бухгалтерского учета, способный :

1. Автоматически отслеживать закупки по продуктам (количество, цена за единицу,
дата)

2. Автоматически обновлять средневзвешенную стоимость (WAC) для
каждого нового счета-фактуры:

3. Подключите систему к текущим таблицам Google или экспортируйте данные в
удобном формате

4. Рассчитывайте маржу по продуктам в режиме реального времени
5. Сократите время ежемесячной обработки данных
6. Повысить надежность анализа рентабельности

2. Объем проекта

Включено в объем проекта (функциональный объем)
Проект охватывает следующие элементы

●

Ручной импорт счетов-фактур поставщиков из :

○
●

Ручной ввод д а н н ы х для импорта

Автоматическое извлечение ключевой информации:

○

Название поставщика

○

Дата выставления счета

○

Приобретенные товары, их количество и цена за единицу

●

Автоматический расчет средневзвешенной стоимости (WAC) для каждого товара после
каждого импорта.

Прямое подключение к Shopify

●

Разработка пользовательского приложения Shopify для :

○

Автоматическое получение данных о продажах (продукт, количество, цена, дата).

○

Ассоциировать каждую продажу с CMP на момент продажи.

○

Ежедневная синхронизация новых данных.

Статистика и панель рентабельности

●

●

Отображение панели прибыльности с фильтрами в приложении Shopify:

○

По товарам

○

По периоду

Экспортируйте результаты в формат Excel/CSV из интерфейса.

Автоматическое обновление файла Google Sheets

●

Синхронизация CMP и продаж/маржи в файле Google Sheets после каждого импорта.

●

Этот файл может использоваться бухгалтерией или финансовым отделом для
проверки или архивирования.

Система протоколирования и отслеживания

●

Полное протоколирование ключевых операций:

○

Импорт счетов-фактур (источник, статус, ошибки)

○

расчеты CMP

○

Экспорт в Google Sheets

○

Запросы в Shopify

●

Журналы можно просматривать в административном интерфейсе или экспортировать (JSON
или CSV)

●
●

Уровень журнала: INFO, WARNING, ERROR
Уведомление по электронной почте в случае возникновения ошибок

3. Ожидаемые функциональные возможности
Каждая функция идентифицирована, приоритезирована и подробно описана.

ID

Функция

Подробное описание

Приоритет

F1. Импорт счетов-фактур поставщиков
| F1| Импорт счетов-фактур| Приложение должно иметь возможность импортировать счета-фактуры
поставщиков :

1. PDF, полученные путем ручного импорта пользователем.
2. Информация, извлекаемая автоматически, должна включать :
●

название поставщика

●

дата выставления счета

●

артикул товара

●

количество

●

цена за единицу

●

общая сумма

F2. Автоматический расчет средневзвешенной стоимости (WAC)
| F2| Расчет средневзвешенной стоимости| При получении нового счета автоматически
пересчитывается средневзвешенная стоимость для каждого продукта:

Эта стоимость сохраняется и обновляется в базе данных или в файле Google Sheets.

F3. Отслеживание продаж в Shopify
| F3| Подключение к Shopify| Автоматическое получение данных о продажах через API Shopify (REST
или GraphQL):

●

ID заказа, дата

●

Товары (SKU), количество, цена продажи

Данные должны синхронизироваться ежедневно

F4. Автоматический расчет наценки
| F4| Расчет наценки на единицу продукции| При каждой продаже или в определенное время
автоматически рассчитывается чистая наценка на единицу продукции.
чистая маржа единицы товара:
Маржа= (Цена продажи - CMP) / Цена продажи * 100
Маржа должна быть сохранена для каждого товара и видна в интерфейсе.

F5. Приборная панель рентабельности
| F5| Статистическая визуализация| Интерактивная панель отображается в приложении Shopify,
с фильтрами по :

●

Продукт

●

Период

●

Поставщик
(опционально)
Отображаемые KPI :

●

общая / средняя маржа

●

объём продаж

●

общая стоимость, общий оборот

●

рентабельность (%)| Среднее значение |

F6. Экспорт в Google Sheets
| F6| Автоматическая синхронизация| Автоматическое обновление общей таблицы Google Sheets с.
:

●

CMP по продуктам

●

История продаж

●

Рассчитанные наценки

●

История закупок
Лист должен быть пригоден для использования без ручного вмешательства.

F7. Система протоколирования и аудита
| F7| Структурированное протоколирование| Протоколирование конфиденциальных операций :

●

Импорт счетов-фактур (поставщик, дата, статус, ошибки)

●

Расчеты CMP

●

Подключение к Shopify

●

Экспорт в Google Sheets

●

Действия пользователей (при многопользовательском использовании)
Журналы должны быть доступны для просмотра через интерфейс или экспорта.

F8. Интерфейс администратора / панель управления
| F8| Ручное управление и контроль| Простой интерфейс для :

●

Добавить счет-фактуру вручную

●

Принудительного перерасчета

●

Запустить экспорт

●

Просмотр журналов

●

Исправить ошибку импорта (например, неправильный разбор PDF).

F9. Специфические правила управления, которые необходимо интегрировать
●

Экспорт в формате PDF после каждого импорта

После импорта каждого счета необходимо создать PDF-экспорт с кратким описанием
продуктов. В нем должны использоваться внутренние SKU Fitness World Nutrition (FWN) для
каждой линейки продуктов.

●

Скидки, применяемые к счетам-фактурам
- Если скидка применяется к общей сумме счета, она должна быть
справедливо распределена между всеми продуктами (пропорционально или
поровну) и включена в конечную цену единицы товара.
- Если скидка предоставляется на каждый продукт, она должна быть правильно
определена и вычтена при расчете WPC.

●

Затраты на доставку
Расходы на доставку должны быть включены в ДПК путем деления на общее
количество единиц товара в счете. Окончательная стоимость единицы товара будет
включать эту часть расходов.

●

Несколько ссылок на один и тот же продукт
Продукт FWN может иметь несколько ссылок на поставщиков. Система должна :
- Поддерживать соответствие между SKU FWN и SKU поставщиков.

-

●

Продукты в упаковках / подлежащие разделению
Некоторые продукты покупаются в упаковках (например, коробка с 12 батончиками). Система
должна уметь :
- Идентификация упаковок с помощью правила разбора или ручной настройки.

-

●

Автоматически делите общую цену упаковки на количество фактических
единиц, чтобы получить фактическую стоимость единицы товара (например,
стоимость батончика).

Конвертация валюты
При импорте счета-фактуры в иностранной валюте:
- Необходимо применить курс конвертации в EUR (с возможностью
указать его вручную или через API).

-

●

Интегрировать 2-колоночную структуру SKU в базу данных или экспорт:
Пример:
[sku-fwn], [sku-supplier1, sku-supplier2], [brand1, brand2].

Конвертированная сумма будет округлена до ближайшей сотой (€).

Обработка нескольких счетов-фактур (асинхронно)
Если несколько счетов-фактур импортируются одновременно:
- Система очередей (например, RabbitMQ) должна управлять импортом в
фоновом режиме.

-

Каждый процесс (импорт, вычисление, экспорт) должен быть индивидуально
отслежен по журналам.

4. Примеры путей пользователей

Пример 1 - Бухгалтер: обработка нового счета-фактуры от поставщика
Задача: добавить счет-фактуру, пересчитать CMP, обновить Google Sheets и сохранить журналы.

1. Бухгалтер входит во внутренний интерфейс приложения.
2. Он нажимает на кнопку "Добавить счет-фактуру поставщика".
3. Он импортирует PDF :
→ поставщик= Болеро
→ товар= Напиток "ICE TEA Lemon"
→ количество= 20 шт.
→ цена за единицу= 3,30 €
→ почтовые расходы= 6 €

4. Получает количество на складе и существующую WAC (например, 10 единиц по €3,00).
5. Он автоматически пересчитывает взвешенную CMP:
CMP=(10×3,00)+(20×3,60)30=3,40€CMP= \frac{(10× 3,00)+ (20× 3,60)}{30}= 3,40 €
6. CMP обновляется в базе данных+ и экспортируется в Google Sheets.

7. Создается журнал: добавляется счет-фактура, обновляется CMP,
синхронизируется Google Sheet.

Пример 2 - Владелец магазина: просмотр прибыльности
Задача: просмотреть наиболее прибыльные товары за месяц

1. Владелец магазина входит в приложение через Shopify Admin.
2. Откройте панель "Рентабельность".
3. Выберите период: с 1 по 30 июня 2025 года.
4. Он сортирует товары по убыванию % маржи.
5. Он видит, что :
○

Продукт A= 41

○

Продукт B= 12

○

Продукт C= -4% (красная тревога).

6. Он нажимает на товар C, чтобы посмотреть подробности:
○

CMP= € 7,50, цена продажи= 7,20. €

○

Покупка по неправильной цене или забытая стоимость доставки

7. Он отправляет данные в отдел закупок или бухгалтерию для корректировки.

Случай 3 - Разработчик / техническая поддержка: расследование ошибки
импорта
Задача: проанализировать, почему счет-фактура не работает

1. Служба поддержки получает уведомление о том, что импорт не удался.
2. Она переходит в раздел "Системные журналы".
3. Он фильтрует:
○

дата= сегодня

○

тип= ERROR

○

действие= invoice_import

4. Выявляется ошибка: "Товар X не существует в базе данных".
5. Исправляет продукт вручную или информирует пользователя.
6. Перезапускается импорт→ успех→ CMP обновлен.

5. Технические ограничения
Архитектура и технический стек
●

Проект будет разработан как пользовательское приложение, интегрированное в
Shopify (Embedded App).

●

Бэкенд должен быть на Node.js (Express).

●

Реляционная база данных: PostgreSQL (собственный хостинг или облако
PostgreSQL-as-a-Service).

●

Docker обязателен для облегчения развертывания, тестирования и CI/CD.

Взаимодействие и API
●

●

Обязательное подключение к API Shopify:

○

Для получения данных о продажах (товары, заказы, цены, дата).

○

GraphQL

Подключение к Google Sheets через Google API:

○

Автоматический ввод CMP, продаж и наценок.

○

Требуется аутентификация OAuth 2.0.

Безопасность
●

Все потоки данных должны проходить по протоколу HTTPS.

●

Аутентификация через Shopify OAuth интегрирована.

●

Чувствительные данные (закупочные цены, наценки, журналы) должны быть :

●

○

Зашифрованы в состоянии покоя (PostgreSQL encryption-at-rest)

○

Защищены на стороне интерфейса (нет неоправданного воздействия на стороне
клиента)

Журналы чувствительных операций должны быть защищены и доступны только
службе поддержки / администратору.

Производительность и масштабируемость
●

Вычисление CMP должно быть способно обрабатывать несколько десятков тысяч строк
запасов
без замедления.

●

Система должна быть способна поддерживать :

○
●

до 30 активных поставщиков с частым выставлением счетов.

Все критические задачи должны быть асинхронными:

○

Экспорт листа Google= отложенная работа

○

Расчет CMP= отложенная работа

Развертывание и сопровождение
●

Приложение должно быть докировано и развертываться через CI/CD (GitHub Actions
или GitLab CI).

●

Переменные окружения должны настраиваться через защищенный файл .env.

●

●

Должна существовать изолированная тестовая среда (песочница) с :

○

фиктивные данные

○

Симуляция импорта/экспорта

○

Отдельные журналы

Система должна быть документирована (технический README).

Контроль и оповещение
Структурированная система протоколирования

●

●

●

Все критические действия должны регистрироваться с указанием уровня (INFO,
WARNING, ERROR):

○

Импорт счета-фактуры (источник, статус, парсинг)

○

Расчет CMP (продукт, запас, результат)

○

Запросы к Shopify (заказ, ошибка, время выполнения)

○

Экспорт в Google Sheets

Журналы должны храниться :

○

в базе данных (таблица журналов PostgreSQL), или

○

в централизованной системе (например, JSON-лог+ ELK stack)

○

с минимальным периодом хранения 90 дней

Ошибки (ERROR, EXCEPTION) будут автоматически отправляться в Sentry.

Уведомления по электронной почте

●

Необходимо интегрировать систему автоматического уведомления по
электронной почте через SMTP SendGrid :

○

Уведомление в начале и конце запланированных обновлений

○

Немедленное уведомление в случае критической ошибки (сбой импорта,
CMP заблокирован, Shopify API не работает)

●

Отправка писем в настраиваемый список)

●

Конфигурация SMTP через переменные окружения (например, SMTP_HOST,
SMTP_PORT, SENDGRID_API_KEY...)

Интеллектуальные оповещения (опционально в версии 1)

●

Обеспечьте простую систему оповещений на основе пороговых значений
(например: отрицательная маржа> 3 товара за 24 часа → электронное письмо).

6. KPI и критерии успеха
Функциональные цели (бизнес)
Бизнес-цель

Показатель

Цель к достижению

Сокращение времени
обработки счетов

Среднее время обработки
счетов-фактур

< 5 минут на один счет-фактуру

Повышение надежности
расчета маржи

Ручная корректировка

< 2% строк

Технические цели
Техническая цель

Качество кода

Индикатор

Покрытие тестами
(модульными/функциональными)

Цель

> 80 %

Стабильность
приложения

Количество критических ошибок (500) /
месяц

0 (или максимум 1,
обработанная в течение 24
часов)

Прослеживаемость

% критических событий,
зарегистрированных в журнале

100% импорта / CMP
/ экспорта

Уведомления

% крупных ошибок, уведомленных по
электронной почте / Sentry

100 %

Просмотр по результатам / техническим модулям
Модуль

Ответственны
й

Импорт счетов-фактур

Dev R,
руководитель
группы

Расчет CMP+ Хранение BDD

Dev A, Team
Lead

Polaris Dashboard (Shopify)

Dev A, Team
Lead

Экспорт API Google Sheets

Dev R, Team
Lead

Интеграция API Shopify

Dev A, Team
Lead

Ведение журнала+ Sentry+ Emails

Dev R, Team
Lead

Функциональное и модульное
тестирование

Team Lead

Развертывание и CI/CD

Team Lead+ Dev
R

8. Методы и управление проектами
8.1. Метод управления проектом
Пример:
Мы будем использовать agile-подход (Scrum) с 1-недельными спринтами.

8.2. Используемые инструменты
Использование

Используемые
инструменты

Управление задачами

Monday (или Jira, Notion...)

Отслеживание версий

Git (GitLab/GitHub)

Общение в команде

Google чаты / Электронная
почта / Telegram / Discord

Проектная
документация

Notion / Google Docs

Развертывание

GitLab CI / CapRover

8.3. Командные ритуалы

Частота

Тип ритуала

Ежедневно Ежедневное совещание
(5-15 минут)

Описание

Быстрое обновление информации в 11 утра о
прогрессе, узких местах, следующих шагах

Еженедель Планирование спринта (1 Понедельник 10 утра: планирование задач
ный
час)
Еженедель Обзор спринта и
ный
демонстрация (30 мин)

Пятница, 16:00: демонстрация результатов

Еженедель Отчет о проделанной
ный
работе (письменный)

Отправляется в понедельник или по электронной
почте (вечером в пятницу)

Текуща
я
работа

Обязательно перед любым слиянием, через Git

Проверка кода

8.4. Мониторинг и отчетность
● Еженедельный отчет о спринте будет подготовлен в понедельник и
передан команде.

● KPI (темп прогресса, ошибки, скорость) будут видны на панели мониторинга.
● Ежедневные проверки будут проводиться в Discord / Google Chat / Telegram:
○ Вчера я сделал...
○ Сегодня я собираюсь...

○ Я застрял на...

8.5. Управление изменениями
● Все запросы на изменения во время спринта должны быть одобрены
руководителем команды.

● В понедельник ведется бэклог для отслеживания будущих запросов.

